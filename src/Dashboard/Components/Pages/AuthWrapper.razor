@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer

@inject IHttpContextAccessor HttpContextAccessor
@inject DiscordAuth DiscordAuth
@attribute [Authorize]

@if (!_isAuthenticated)
{
    <div class="container min-vh-100 d-flex flex-column justify-content-center align-items-center text-center">
        <div class="text-light">
            <i class="bi bi-lock-fill" style="font-size: 4rem;"></i>
            <h1 class="mt-3">Access Denied</h1>
            <p class="text-secondary">You do not have the required roles.</p>
            @if (_errorMessage != null)
            {
                <p class="text-danger">@_errorMessage</p>
                <p>Try logging in again.</p>
            }
        </div>
    </div>
}
else
{
    <div>
        @ChildContent
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool _isAuthenticated;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var context = HttpContextAccessor.HttpContext;
        if (context is null)
        {
            _errorMessage = "HTTP context is not available.";
            return;
        }

        var authenticatedResult = await DiscordAuth.IsAuthenticatedAsync(context);
        if (authenticatedResult.IsFailed)
        {
            _errorMessage = authenticatedResult.Reasons.FirstOrDefault()?.Message ?? "Authentication failed.";
            return;
        }

        _isAuthenticated = authenticatedResult.Value;
    }

}