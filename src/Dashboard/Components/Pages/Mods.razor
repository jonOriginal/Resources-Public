@page "/"
@using Backend.Api
@using Backend.Api.Services
@rendermode InteractiveServer

@inject ModService ModService

<PageTitle>Manage Skyblocked Mods and Tags</PageTitle>
<AuthWrapper>
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-6">
                <h1 class="text-center text-light mb-4">Manage Tags</h1>
                @if (_availableTags == null)
                {
                    <div class="text-center text-secondary">Loading tags...</div>
                }
                else
                {
                    <div class="card bg-dark text-light mb-4">
                        <div class="card-header">
                            <h2>Existing Tags</h2>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-dark table-striped">
                                    <thead>
                                    <tr>
                                        <th>Color</th>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Actions</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @if (!_availableTags.Any())
                                    {
                                        <tr>
                                            <td colspan="4" class="text-center">No tags available. Add one below.</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var kvp in _availableTags)
                                        {
                                            <tr>
                                                <td>
                                                    <span class="badge" style="background-color: @kvp.Value.ColorHex">&nbsp;&nbsp;&nbsp;</span>
                                                </td>
                                                <td>@kvp.Value.Name</td>
                                                <td>@kvp.Value.Description</td>
                                                <td>
                                                    <button class="btn btn-sm btn-primary"
                                                            @onclick="() => StartEditingTag(kvp.Value)">Edit
                                                    </button>
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-danger"
                                                            @onclick="() => DeleteTag(kvp.Value.Id)">Delete
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    </tbody>
                                </table>
                            </div>

                            <h3 class="mt-4">@(_currentTagState.IsEditing ? "Edit Tag" : "Add a New Tag")</h3>
                            <form @onsubmit="HandleTagSubmit">
                                <div class="row g-3 align-items-end">
                                    @{ var currentTag = _currentTagState.Tag; }
                                    <div class="col-md-4">
                                        <label for="newTagName" class="form-label">Tag Name</label>
                                        <input id="newTagName" type="text" class="form-control bg-secondary text-light"
                                               placeholder="e.g. Utility" @bind="currentTag.Name">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="newTagDesc" class="form-label">Tag Description</label>
                                        <input id="newTagDesc" type="text" class="form-control bg-secondary text-light"
                                               placeholder="What this tag is for" @bind="currentTag.Description">
                                    </div>
                                    <div class="col-md-2">
                                        <label for="newTagColor" class="form-label">Color</label>
                                        <input id="newTagColor" type="color"
                                               class="form-control bg-secondary text-light"
                                               @bind="currentTag.ColorHex">
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-success w-100" @onclick="HandleTagSubmit">
                                            @(_currentTagState.IsEditing ? "Update Tag" : "Add Tag")
                                        </button>
                                    </div>
                                    <div class="col-md-12">
                                        <button type="submit" class="btn btn-secondary w-100">
                                            Clear Form
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-6">
                <h1 class="text-center text-light mb-4">Manage Mods</h1>
                @if (_mods == null || _availableTags == null)
                {
                    <div class="text-center text-secondary">Loading mods or tags...</div>
                }
                else
                {
                    <div class="card bg-dark text-light mb-4">
                        <div class="card-header">
                            <h2>@(_currentModState.IsEditing ? "Edit Mod" : "Create New Mod")</h2>
                        </div>
                        <div class="card-body">
                            @{ var currentMod = _currentModState.Mod; }
                            <form @onsubmit="HandleModSubmit">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="name" class="form-label">Name</label>
                                        <input id="name" type="text" class="form-control bg-secondary text-light"
                                               @bind="currentMod.Name" required>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="author" class="form-label">Author</label>
                                        <input id="author" type="text" class="form-control bg-secondary text-light"
                                               @bind="currentMod.Author" required>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="rating" class="form-label">Rating</label>
                                        <input id="rating" type="number" min="0" max="5" step="0.1"
                                               class="form-control bg-secondary text-light" @bind="currentMod.Rating">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="iconUrl" class="form-label">Icon URL</label>
                                        <input id="iconUrl" type="url" class="form-control bg-secondary text-light"
                                               @bind="currentMod.IconUrl">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="websiteUrl" class="form-label">Website URL</label>
                                        <input id="websiteUrl" type="url" class="form-control bg-secondary text-light"
                                               @bind="currentMod.WebsiteUrl">
                                    </div>
                                    <div class="col-md-12">
                                        <label for="description" class="form-label">Description</label>
                                        <textarea id="description" rows="4" class="form-control bg-secondary text-light"
                                                  @bind="currentMod.Description"></textarea>
                                    </div>
                                    <div class="col-md-12">
                                        <label class="form-check-label">
                                            <input type="checkbox" class="form-check-input bg-secondary text-light"
                                                   @bind="currentMod.IsCompromised">
                                            Is Compromised
                                        </label>
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <label class="form-label">Select Tags</label>
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (var kvp in _availableTags)
                                        {
                                            var isSelected = currentMod.TagIds?.Any(t => t == kvp.Value.Id) ?? false;
                                            <button type="button" @onclick="() => ToggleTag(kvp.Value)"
                                                    class="btn btn-sm @(isSelected ? "btn-success" : "btn-outline-secondary")">
                                                @kvp.Value.Name
                                            </button>
                                        }
                                    </div>
                                </div>
                                <div class="d-flex justify-content-end gap-3 mt-4">
                                    <button type="submit"
                                            class="btn btn-primary">@(_currentModState.IsEditing ? "Update" : "Save")</button>
                                    <button type="button" class="btn btn-secondary" @onclick="ClearModForm">Cancel
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div class="card bg-dark text-light">
                        <div class="card-header">
                            <h2>Existing Mods</h2>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-dark table-striped">
                                    <thead>
                                    <tr>
                                        <th>Icon</th>
                                        <th>Name</th>
                                        <th>Tags</th>
                                        <th>Actions</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var mod in _mods)
                                    {
                                        <tr>
                                            <td>
                                                @if (!string.IsNullOrEmpty(mod.IconUrl))
                                                {
                                                    <img src="@mod.IconUrl" alt="@mod.Name" class="rounded-circle"
                                                         style="height:40px;width:40px;">
                                                }
                                            </td>
                                            <td>@mod.Name</td>
                                            <td>
                                                @if (mod.TagIds == null || !mod.TagIds.Any())
                                                {
                                                    <span class="text-secondary">No tags</span>
                                                }
                                                else
                                                {
                                                    @foreach (var tag in mod.TagIds)
                                                    {
                                                        if (!_availableTags.TryGetValue(tag, out var modTag)) continue;
                                                        <span class="badge m-1"
                                                              style="background-color: @modTag.ColorHex">@modTag.Name</span>
                                                    }
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-primary"
                                                        @onclick="() => StartEditingMod(mod)">
                                                    Edit
                                                </button>
                                                <button class="btn btn-sm btn-danger"
                                                        @onclick="() => DeleteMod(mod.Id)">
                                                    Delete
                                                </button>
                                                <button class="btn btn-sm btn-warning"
                                                        @onclick="() => SetCompromised(mod.Id)">
                                                    Set Compromised
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</AuthWrapper>

@code {
    private ICollection<Mod>? _mods;

    private ModState _currentModState = CreateNewMod();
    private ModTagState _currentTagState = CreateNewTag();

    private IDictionary<string, ModTag>? _availableTags;
    
    private class ModState
    {
        public required Mod Mod { get; init; }
        public required bool IsEditing { get; init; }
    }

    private class ModTagState
    {
        public required ModTag Tag { get; init; }
        public required bool IsEditing { get; init; }
    }

    private static ModState CreateNewMod()
    {
        return new ModState
        {
            IsEditing = false,
            Mod = new Mod
            {
                Id = Guid.NewGuid().ToString(), 
                Name = string.Empty, 
                Author = string.Empty, 
                Description = null, 
                DiscordUrl = null, 
                WebsiteUrl = null, 
                IconUrl = null, Rating = 0, 
                IsCompromised = false, 
                TagIds = new List<string>()
            }
        };
    }

    private static ModTagState CreateNewTag()
    {
        return new ModTagState
        {
            IsEditing = false,
            Tag = new ModTag
            {
                Id = Guid.NewGuid().ToString(), Name = string.Empty, Description = string.Empty, ColorHex = "#FFFFFF"
            }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTags();
        await LoadMods();
    }

    private async Task LoadMods()
    {
        _mods = await ModService.GetMods();
    }

    private async Task LoadTags()
    {
        _availableTags = await ModService.GetModTagsDictionary();
    }


    private async Task HandleTagSubmit()
    {
        await SaveTag();
        ClearTagForm();
    }

    private async Task HandleModSubmit()
    {
        await SaveMod();
        ClearModForm();
    }

    private async Task SaveMod()
    {
        if (_currentModState.IsEditing)
        {
            await ModService.UpdateMod(_currentModState.Mod);
        }
        else
        {
            await ModService.CreateMod(_currentModState.Mod);
        }

        await LoadMods();
        _currentModState = CreateNewMod();
    }

    private async Task SaveTag()
    {
        if (_currentTagState.IsEditing)
        {
            await ModService.UpdateModTag(_currentTagState.Tag);
        }
        else
        {
            await ModService.CreateModTag(_currentTagState.Tag);
        }

        await LoadTags();
        _currentTagState = CreateNewTag();
    }

    private void ToggleTag(ModTag tag)
    {
        _currentModState.Mod.TagIds ??= new List<string>();
        if (_currentModState.Mod.TagIds.Contains(tag.Id))
        {
            _currentModState.Mod.TagIds.Remove(tag.Id);
        }
        else
        {
            _currentModState.Mod.TagIds.Add(tag.Id);
        }
    }
    
    private async Task SetCompromised(string modId)
    {
        await ModService.SetCompromised(modId);
        await LoadMods();
    }

    private async Task DeleteMod(string modId)
    {
        if (string.IsNullOrEmpty(modId)) return;
        await ModService.DeleteMod(modId);
        await LoadMods();
    }

    private void ClearTagForm()
    {
        _currentTagState = CreateNewTag();
        StateHasChanged();
    }

    private void ClearModForm()
    {
        _currentModState = CreateNewMod();
        StateHasChanged();
    }

    private void StartEditingMod(Mod mod)
    {
        _currentModState = new ModState
        {
            IsEditing = true,
            Mod = mod
        };
        StateHasChanged();
    }

    private void StartEditingTag(ModTag tag)
    {
        _currentTagState = new ModTagState
        {
            IsEditing = true,
            Tag = tag
        };
        StateHasChanged();
    }

    private async Task DeleteTag(string id)
    {
        await ModService.DeleteModTag(id);
        await LoadTags();
        _currentTagState = CreateNewTag();
    }

}
